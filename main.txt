# Content from practica37\main.txt
import numpy as np
import matplotlib.pyplot as plt

# --- ParÃ¡metros Iniciales ---

# Dimensiones de la imagen y parÃ¡metros de la esfera
img_size = 400
radius = 1.0
center = np.array([0.0, 0.0, 0.0]) # Asumiendo centro en el origen para simplificar normales

# ParÃ¡metros de iluminaciÃ³n
ambient_intensity = 0.2          # Componente ambiental global
kd = 0.7                         # Coeficiente difuso del material
ks = 0.5                         # Coeficiente especular del material
specular_exponent = 32           # Exponente para el brillo especular (shininess)

# PosiciÃ³n de la fuente de luz y del observador (cÃ¡mara)
light_pos = np.array([2.0, 2.0, 2.0])
eye_pos = np.array([0.0, 0.0, 5.0]) # Observador en el eje Z positivo

# Color del objeto (AHORA AZUL) y del highlight especular (blanco)
object_color = np.array([0.0, 0.0, 1.0]) # <--- CAMBIO AQUÃ: Color Azul
specular_color = np.array([1.0, 1.0, 1.0]) # Ks implÃ­cito en este color

# --- PreparaciÃ³n de la GeometrÃ­a y la Imagen ---

# Crear una cuadrÃ­cula 2D representando la proyecciÃ³n en el plano XY
x = np.linspace(-radius, radius, img_size)
y = np.linspace(-radius, radius, img_size)
X, Y = np.meshgrid(x, y)

# Inicializar la imagen (RGB)
image = np.zeros((img_size, img_size, 3))

# Calcular la coordenada z de la esfera
z_squared = radius**2 - X**2 - Y**2
Z = np.sqrt(np.maximum(0, z_squared))

# Crear una mÃ¡scara para los puntos que pertenecen a la esfera
mask = X**2 + Y**2 <= radius**2

# PosiciÃ³n de cada punto en la superficie visible de la esfera
points = np.stack([X, Y, Z], axis=-1)

# --- CÃ¡lculo de Normales ---

# Normal en cada punto de la esfera (vector unitario)
normals = np.zeros_like(points)
# Calcular normales solo para los puntos dentro de la mÃ¡scara
normals[mask] = points[mask] / radius

# --- FunciÃ³n Auxiliar ---

# FunciÃ³n para normalizar vectores
def normalize(v):
    norm = np.linalg.norm(v, axis=-1, keepdims=True)
    # Usar np.finfo para un epsilon pequeÃ±o y evitar divisiÃ³n por cero
    norm = np.maximum(norm, np.finfo(float).eps)
    return v / norm

# --- CÃ¡lculos de IluminaciÃ³n (Vectorizados donde sea posible) ---

# Calcular vectores de luz (L) y vista (V) para cada punto de la esfera
# Aplicar solo a los puntos vÃ¡lidos usando la mÃ¡scara

# Vector de luz: desde el punto hasta la fuente de luz
L = light_pos - points[mask]
L = normalize(L)

# Vector de vista: desde el punto hasta la posiciÃ³n del observador
V = eye_pos - points[mask]
V = normalize(V)

# Acceder a las normales solo para los puntos vÃ¡lidos
N = normals[mask] # Ya estÃ¡n normalizadas

# Calcular la reflexiÃ³n para el modelo Phong: R = 2*(NÂ·L)*N - L
dot_NL = np.sum(N * L, axis=-1, keepdims=True)
# Clampear NÂ·L >= 0 *antes* de calcular R para evitar reflejos extraÃ±os de luz "trasera"
dot_NL_clamped = np.maximum(0.0, dot_NL)
R = 2 * dot_NL_clamped * N - L
R = normalize(R)

# Calcular cada componente de la iluminaciÃ³n para los puntos en la mÃ¡scara

# Componente ambiental
ambient = ambient_intensity

# Componente difusa (segÃºn Lambert)
# kd * max(0, N Â· L)
# Usamos el dot_NL_clamped calculado antes
diffuse_intensity = kd * dot_NL_clamped.squeeze() # .squeeze() para quitar la dimensiÃ³n extra
diffuse = diffuse_intensity # Renombrado para claridad, ahora es escalar por punto

# Componente especular (modelo Phong)
# ks * max(0, R Â· V) ^ specular_exponent
dot_RV = np.sum(R * V, axis=-1) # RÂ·V por punto
specular_intensity = ks * (np.maximum(0.0, dot_RV) ** specular_exponent)
specular = specular_intensity # Renombrado para claridad, ahora es escalar por punto

# --- Combinar Componentes y Asignar Colores ---

# Combinar componentes para obtener el color final por pÃ­xel
shading = np.zeros((mask.sum(), 3)) # Array para guardar el color calculado

# Para cada canal (R, G, B)
for c in range(3):
    # Color = Amb*ObjCol + Diff*ObjCol + Spec*SpecCol
    # Asegurarse que diffuse y specular tengan la forma correcta para broadcasting si es necesario
    # (aunque con squeeze y axis=-1 deberÃ­an ser 1D arrays de tamaÃ±o mask.sum())
    shading[:, c] = ambient * object_color[c] + diffuse * object_color[c] + specular * specular_color[c]

# Solo asignar color a los pÃ­xeles que pertenecen a la esfera
final_image = np.zeros_like(image) # Imagen final inicializada a negro
final_image[mask] = shading # Asignar los colores calculados a los pÃ­xeles de la mÃ¡scara

# Asegurarse que los valores estÃ©n en el rango [0,1]
final_image = np.clip(final_image, 0, 1)

# --- Mostrar el resultado ---
plt.figure(figsize=(6, 6))
plt.imshow(final_image)
plt.axis('off')
plt.title('IluminaciÃ³n Combinada: Ambiental, Difusa y Especular (Azul)')
plt.show()


# Content from practica38\main.txt
import numpy as np
import matplotlib.pyplot as plt

# Dimensiones de la imagen
width, height = 400, 400
image = np.ones((height, width, 3))

# DefiniciÃ³n de los vÃ©rtices del triÃ¡ngulo (coordenadas en pÃ­xeles)
v0 = np.array([100, 100])
v1 = np.array([300, 180])
v2 = np.array([200, 300])
vertices = np.array([v0, v1, v2])

# Colores asociados a cada vÃ©rtice (en formato RGB, valores entre 0 y 1)
color_v0 = np.array([1.0, 0.0, 0.0])  # Rojo
color_v1 = np.array([0.0, 1.0, 0.0])  # Verde
color_v2 = np.array([0.0, 0.0, 1.0])  # Azul
colors = np.array([color_v0, color_v1, color_v2])

def barycentric_coords(p, a, b, c):
    """
    Calcula las coordenadas baricÃ©ntricas de un punto p
    con respecto al triÃ¡ngulo formado por los puntos a, b y c.
    """
    # Vectores del triÃ¡ngulo
    v0 = b - a
    v1 = c - a
    v2 = p - a

    # Producto cruzado (Ã¡rea * 2) para la regiÃ³n del triÃ¡ngulo
    denom = v0[0] * v1[1] - v1[0] * v0[1]

    # Evitar divisiÃ³n por cero (triÃ¡ngulo degenerado)
    if np.abs(denom) < 1e-6:
        return -1, -1, -1

    # CÃ¡lculo de las coordenadas baricÃ©ntricas
    alpha = (v2[0] * v1[1] - v1[0] * v2[1]) / denom
    beta  = (v0[0] * v2[1] - v2[0] * v0[1]) / denom
    gamma = 1 - alpha - beta

    return alpha, beta, gamma

# Calcular el rectÃ¡ngulo contenedor (bounding box) del triÃ¡ngulo
min_x = int(np.clip(np.min(vertices[:, 0]), 0, width-1))
max_x = int(np.clip(np.max(vertices[:, 0]), 0, width-1))
min_y = int(np.clip(np.min(vertices[:, 1]), 0, height-1))
max_y = int(np.clip(np.max(vertices[:, 1]), 0, height-1))

# Recorrer los pÃ­xeles dentro del bounding box
for y in range(min_y, max_y+1):
    for x in range(min_x, max_x+1):
        p = np.array([x, y])

        # Obtener coordenadas baricÃ©ntricas para el pÃ­xel
        alpha, beta, gamma = barycentric_coords(p, v0, v1, v2)

        # Verificar si el punto se encuentra dentro del triÃ¡ngulo
        if alpha >= 0 and beta >= 0 and gamma >= 0:
            # InterpolaciÃ³n de colores usando las coordenadas baricÃ©ntricas
            pixel_color = alpha * color_v0 + beta * color_v1 + gamma * color_v2
            image[y, x] = pixel_color

# Mostrar el resultado
plt.figure(figsize=(6, 6))
plt.imshow(image)
plt.title("Sombreado con InterpolaciÃ³n (BaricÃ©ntrico)")
plt.axis("off")
plt.show()


# Content from practica39\main.txt
import pygame
import numpy as np

# InicializaciÃ³n
pygame.init()
screen = pygame.display.set_mode((600, 600))
pygame.display.set_caption("PentÃ¡gono con sombreado Gouraud (NumPy)")
clock = pygame.time.Clock()

# Centro y radio
cx, cy = 300, 300
radius = 200
num_vertices = 5

# Generar coordenadas del pentÃ¡gono
angles = np.linspace(-np.pi / 2, 3 * np.pi / 2, num_vertices, endpoint=False)
vertices = np.stack([
    cx + radius * np.cos(angles),
    cy + radius * np.sin(angles)
], axis=-1)

# Colores RGB por vÃ©rtice
vertex_colors = np.array([
    [255, 0, 0],    # Rojo
    [0, 255, 0],    # Verde
    [0, 0, 255],    # Azul
    [255, 255, 0],  # Amarillo
    [255, 0, 255]   # Magenta
])

# Centro del pentÃ¡gono
center = np.array([cx, cy])
center_color = vertex_colors.mean(axis=0)

# FunciÃ³n de coordenadas baricÃ©ntricas
def barycentric_coords(p, a, b, c):
    v0 = b - a
    v1 = c - a
    v2 = p - a
    d00 = np.dot(v0, v0)
    d01 = np.dot(v0, v1)
    d11 = np.dot(v1, v1)
    d20 = np.dot(v2, v0)
    d21 = np.dot(v2, v1)
    denom = d00 * d11 - d01 * d01
    if denom == 0:
        return -1, -1, -1
    v = (d11 * d20 - d01 * d21) / denom
    w = (d00 * d21 - d01 * d20) / denom
    u = 1.0 - v - w
    return u, v, w

# Dibujar triÃ¡ngulo con interpolaciÃ³n Gouraud
def draw_gouraud_triangle(a, b, c, ca, cb, cc):
    min_x = int(min(a[0], b[0], c[0]))
    max_x = int(max(a[0], b[0], c[0]))
    min_y = int(min(a[1], b[1], c[1]))
    max_y = int(max(a[1], b[1], c[1]))

    for x in range(min_x, max_x + 1):
        for y in range(min_y, max_y + 1):
            p = np.array([x, y])
            u, v, w = barycentric_coords(p, a, b, c)
            if u >= 0 and v >= 0 and w >= 0:
                color = u * ca + v * cb + w * cc
                color = np.clip(color, 0, 255).astype(int)
                screen.set_at((x, y), color)

# Loop principal
running = True
while running:
    screen.fill((0, 0, 0))

    for i in range(num_vertices):
        a = center
        b = vertices[i]
        c = vertices[(i + 1) % num_vertices]
        ca = center_color
        cb = vertex_colors[i]
        cc = vertex_colors[(i + 1) % num_vertices]
        draw_gouraud_triangle(a, b, c, ca, cb, cc)

    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    clock.tick(60)

pygame.quit()


# Content from practica40\main.txt
import pygame
import numpy as np

pygame.init()
screen = pygame.display.set_mode((600, 600))
pygame.display.set_caption("PentÃ¡gono con sombreado Phong")
clock = pygame.time.Clock()

# ConfiguraciÃ³n de iluminaciÃ³n y materiales
light_pos = np.array([300, 300, 200])
light_color = np.array([1.0, 1.0, 1.0])
ambient = 0.1
diffuse_strength = 0.7
specular_strength = 0.6
shininess = 32

# GeometrÃ­a
cx, cy = 300, 300
radius = 200
num_vertices = 5

# Coordenadas del pentÃ¡gono (2D) y sus normales (simples en Z+)
angles = np.linspace(-np.pi / 2, 3 * np.pi / 2, num_vertices, endpoint=False)
vertices_2d = np.stack([
    cx + radius * np.cos(angles),
    cy + radius * np.sin(angles)
], axis=-1)
vertices_3d = np.hstack([vertices_2d, np.zeros((num_vertices, 1))])
normals = np.tile(np.array([0, 0, 1]), (num_vertices, 1))  # todos apuntan hacia fuera de la pantalla

# Centro
center = np.array([cx, cy, 0])
center_normal = np.array([0, 0, 1])

# Barycentric interpolation
def barycentric_coords(p, a, b, c):
    v0 = b[:2] - a[:2]
    v1 = c[:2] - a[:2]
    v2 = p - a[:2]
    d00 = np.dot(v0, v0)
    d01 = np.dot(v0, v1)
    d11 = np.dot(v1, v1)
    d20 = np.dot(v2, v0)
    d21 = np.dot(v2, v1)
    denom = d00 * d11 - d01 * d01
    if denom == 0:
        return -1, -1, -1
    v = (d11 * d20 - d01 * d21) / denom
    w = (d00 * d21 - d01 * d20) / denom
    u = 1 - v - w
    return u, v, w

# Phong lighting per pixel
def compute_phong(normal, position):
    normal = normal / np.linalg.norm(normal)
    light_dir = light_pos - position
    light_dir = light_dir / np.linalg.norm(light_dir)
    view_dir = np.array([0, 0, 1])

    # Ambient
    ambient_color = ambient * light_color

    # Diffuse
    diff = max(np.dot(normal, light_dir), 0)
    diffuse_color = diffuse_strength * diff * light_color

    # Specular
    reflect_dir = 2 * np.dot(normal, light_dir) * normal - light_dir
    spec = np.power(max(np.dot(view_dir, reflect_dir), 0), shininess)
    specular_color = specular_strength * spec * light_color

    result = ambient_color + diffuse_color + specular_color
    return np.clip(result * 255, 0, 255).astype(int)

# Dibuja un triÃ¡ngulo con sombreado Phong
def draw_phong_triangle(v1, v2, v3, n1, n2, n3):
    min_x = int(min(v1[0], v2[0], v3[0]))
    max_x = int(max(v1[0], v2[0], v3[0]))
    min_y = int(min(v1[1], v2[1], v3[1]))
    max_y = int(max(v1[1], v2[1], v3[1]))

    for x in range(min_x, max_x + 1):
        for y in range(min_y, max_y + 1):
            p = np.array([x, y])
            u, v, w = barycentric_coords(p, v1, v2, v3)
            if u >= 0 and v >= 0 and w >= 0:
                interpolated_normal = u * n1 + v * n2 + w * n3
                interpolated_pos = u * v1 + v * v2 + w * v3
                color = compute_phong(interpolated_normal, interpolated_pos)
                screen.set_at((x, y), color)

# Main loop
running = True
while running:
    screen.fill((0, 0, 0))

    for i in range(num_vertices):
        v1 = center
        v2 = vertices_3d[i]
        v3 = vertices_3d[(i + 1) % num_vertices]
        n1 = center_normal
        n2 = normals[i]
        n3 = normals[(i + 1) % num_vertices]

        draw_phong_triangle(v1, v2, v3, n1, n2, n3)

    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    clock.tick(60)

pygame.quit()


# Content from practica41\main.txt
def mostrar_historia():
    print("\n--- Historia de la AnimaciÃ³n por Computadora ---")
    print("* DÃ©cada de 1960: Inicios con Ivan Sutherland y el programa Sketchpad.")
    print("* 1982: 'Tron' de Disney usa secuencias generadas por computadora.")
    print("* 1995: Pixar lanza 'Toy Story', el primer largometraje 100% animado digitalmente.\n")

def mostrar_evolucion():
    print("\n--- EvoluciÃ³n TecnolÃ³gica ---")
    print("* 1980-1990: Nace el CGI, mejora el modelado 3D y el renderizado.")
    print("* 2000-2010: Realismo con captura de movimiento, sombras y simulaciones fÃ­sicas.")
    print("* 2010 en adelante: Se integran IA, realidad aumentada y motores como Unity o Unreal Engine.\n")

def mostrar_aplicaciones():
    print("\n--- Aplicaciones de la AnimaciÃ³n por Computadora ---")
    print("* Cine y TV: Personajes virtuales, efectos visuales.")
    print("* Videojuegos: Modelado, cinemÃ¡ticas, interacciÃ³n.")
    print("* Medicina: SimulaciÃ³n quirÃºrgica, visualizaciÃ³n de Ã³rganos.")
    print("* Arquitectura: Recorridos virtuales, modelos 3D.")
    print("* EducaciÃ³n: Recursos animados y e-learning.\n")

def menu():
    while True:
        print("=== AnimaciÃ³n por Computadora ===")
        print("1. Historia")
        print("2. EvoluciÃ³n")
        print("3. Aplicaciones")
        print("4. Salir")
        opcion = input("Selecciona una opciÃ³n: ")

        if opcion == '1':
            mostrar_historia()
        elif opcion == '2':
            mostrar_evolucion()
        elif opcion == '3':
            mostrar_aplicaciones()
        elif opcion == '4':
            print("Gracias por explorar la animaciÃ³n por computadora.")
            break
        else:
            print("OpciÃ³n no vÃ¡lida. Intenta de nuevo.\n")

if __name__== "__main__":
    menu()


# Content from practica42\main.txt
import tkinter as tk
from tkinter import messagebox

def mostrar_historia():
    mensaje = (
        "* DÃ©cada de 1960: Inicios con Ivan Sutherland y el programa Sketchpad.\n"
        "* 1970s: Ford de Disney introduce secuencias CGI.\n"
        "* 1995: 'Toy Story' de Pixar es el primer largometraje animado completamente por computadora."
    )
    messagebox.showinfo("Historia", mensaje)

def mostrar_evolucion():
    mensaje = (
        "* 1980/1990: Nace el CGI, mejora el modelado 3D y el renderizado.\n"
        "* 2000-2010: Realismo con captura de movimiento, sombras y simulaciones fÃ­sicas.\n"
        "* 2010 en adelante: Uso de inteligencia artificial y realidad virtual."
    )
    messagebox.showinfo("EvoluciÃ³n", mensaje)

def mostrar_aplicaciones():
    mensaje = (
        "* Cine y TV: Efectos especiales, personajes virtuales.\n"
        "* Videojuegos: Modelado 3D, cinemÃ¡ticas, mundos interactivos.\n"
        "* Medicina: VisualizaciÃ³n de Ã³rganos, simulaciones quirÃºrgicas.\n"
        "* Arquitectura: Recorridos virtuales, simulaciones estructurales.\n"
        "* EducaciÃ³n: Videos explicativos, e-learning, animaciones didÃ¡cticas."
    )
    messagebox.showinfo("Aplicaciones", mensaje)

# Crear ventana principal
ventana = tk.Tk()
ventana.title("AnimaciÃ³n por Computadora")
ventana.geometry("400x300")
ventana.config(bg="#f0f0f0")

# TÃ­tulo
titulo = tk.Label(ventana, text="AnimaciÃ³n por Computadora", font=("Arial", 16, "bold"), bg="#f0f0f0")
titulo.pack(pady=20)

# Botones
btn_historia = tk.Button(ventana, text="Historia", command=mostrar_historia, width=30)
btn_historia.pack(pady=5)

btn_evolucion = tk.Button(ventana, text="EvoluciÃ³n", command=mostrar_evolucion, width=30)
btn_evolucion.pack(pady=5)

btn_aplicaciones = tk.Button(ventana, text="Aplicaciones", command=mostrar_aplicaciones, width=30)
btn_aplicaciones.pack(pady=5)

btn_salir = tk.Button(ventana, text="Salir", command=ventana.quit, width=30, fg="white", bg="red")
btn_salir.pack(pady=20)

ventana.mainloop()


# Content from practica43\main.txt
import http.server
import socketserver

PORT = 8000

html_content = """
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Historia de la AnimaciÃ³n por Computadora</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            padding: 20px;
        }
        h1, h2 {
            color: #333;
        }
        .seccion {
            background: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        ul {
            list-style: none;
            padding-left: 0;
        }
        li::before {
            content: "â€¢ ";
            color: #2a6ebb;
        }
    </style>
</head>
<body>
    <h1>Historia, EvoluciÃ³n y AplicaciÃ³n de la AnimaciÃ³n por Computadora</h1>

    <div class="seccion">
        <h2>ðŸ“œ Historia</h2>
        <ul>
            <li>1960: Ivan Sutherland crea Sketchpad.</li>
            <li>1982: Disney lanza Tron con grÃ¡ficos por computadora.</li>
            <li>1995: Pixar revoluciona el cine con Toy Story.</li>
        </ul>
    </div>

    <div class="seccion">
        <h2>ðŸ“ˆ EvoluciÃ³n</h2>
        <ul>
            <li>1980â€“90: Nacimiento del CGI.</li>
            <li>2000â€“2010: Captura de movimiento, iluminaciÃ³n realista.</li>
            <li>2010+: Inteligencia Artificial, Realidad Virtual, motores 3D.</li>
        </ul>
    </div>

    <div class="seccion">
        <h2>ðŸš€ Aplicaciones</h2>
        <ul>
            <li>Cine y TV: Personajes virtuales, efectos visuales.</li>
            <li>Videojuegos: Mundos 3D y realistas.</li>
            <li>Medicina: VisualizaciÃ³n de Ã³rganos, simulaciones.</li>
            <li>EducaciÃ³n: Videos didÃ¡cticos y e-learning.</li>
            <li>Arquitectura: Renderizados y recorridos virtuales.</li>
        </ul>
    </div>
</body>
</html>
"""

class MyHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/":
            self.send_response(200)
            self.send_header("Content-type", "text/html; charset=utf-8")
            self.end_headers()
            self.wfile.write(html_content.encode("utf-8"))
        else:
            self.send_error(404, "Archivo no encontrado")

with socketserver.TCPServer(("", PORT), MyHandler) as httpd:
    print(f"Servidor iniciado en http://localhost:{PORT}")
    httpd.serve_forever()


# Content from practica44\main.txt
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup

class MainApp(App):
    def build(self):
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        title = Label(text='AnimaciÃ³n por Computadora', font_size=24, size_hint_y=None, height=50)
        layout.add_widget(title)
        
        layout.add_widget(Button(text='Historia', size_hint_y=None, height=50, on_release=self.show_historia))
        layout.add_widget(Button(text='Evolucion', size_hint_y=None, height=50, on_release=self.show_evolucion))
        layout.add_widget(Button(text='Aplicaciones', size_hint_y=None, height=50, on_release=self.show_aplicaciones))
        
        return layout
    
    def show_historia(self, instance):
        contenido = (
            "* DÃ©cada de 1960: Ivan Sutherland y Sketchpad.\n",
            "* 1982: Dinsey Lanza Tron.\n",
            "* 1995: Pixar Lanza Toy Story, la primera pelicula animada digitalmente."
        )
        self.show_popup("Historia", contenido)
        
    def show_evolucion(self, instance):
        contenido = (
            "* 1980-90: Nace el CGI.\n",
            "* 2000-10: Captura de movimiento y realismo.\n",
            "* 2010+: IA, RV, y motores como Unreal y Unity."
        )
        self.show_popup("EvoluciÃ³n", contenido)
        
    def show_aplicaciones(self, instance):
        contenido = (
            "* Cine y TV: efectos, personajes digitales.\n",
            "* Videojuegos: interacciÃ³n 3D.\n",
            "* Medicina: simulaciones.\n",
            "* EducaciÃ³n: videos didÃ¡cticos.<\n",
            "* Arquitectura: recorridos virtuales."
        )
        self.show_popup("Aplicaciones", contenido)
        
    def show_popup(self, title, message):
        popup = Popup(title=title,
                      content=Label(text="".join(message)),
                      size_hint=(0.8, 0.5))
        popup.open()
        
if __name__ == '__main__':
    MainApp().run()
        

# Content from practica46\main.txt


# Content from practica47\main.txt
import pygame
import sys
import math

# Inicializar Pygame
pygame.init()

WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Morfing - Cuadrado a Estrella")

WHITE = (255, 255, 255)
BLUE = (0, 100, 255) # Asumo este color, puede ser otro azul

clock = pygame.time.Clock()
fps = 60
duration = 3  # segundos
total_frames = duration * fps

# Definir dos formas con el mismo nÃºmero de puntos
def get_square(center, size):
    cx, cy = center
    half = size // 2 # Use integer division for pixel coordinates
    return [
        (cx - half, cy - half),
        (cx + half, cy - half),
        (cx + half, cy + half),
        (cx - half, cy + half)
    ]

def get_star(center, size):
    cx, cy = center
    points = []
    for i in range(4): # The screenshot seems to imply range(4) based on points[:4]
        angle = i * (math.pi / 2)
        outer_x = cx + math.cos(angle) * size
        outer_y = cy + math.sin(angle) * size

        inner_angle = angle + math.pi / 4
        inner_x = cx + math.cos(inner_angle) * (size * 0.5)
        inner_y = cy + math.sin(inner_angle) * (size * 0.5)

        points.extend([(outer_x, outer_y), (inner_x, inner_y)])

    return points[:4]

def interpolate_points(p1_list, p2_list, t):
    interpolated_points = []
    for (x1, y1), (x2, y2) in zip(p1_list, p2_list):
        ix = int(x1 + (x2 - x1) * t)
        iy = int(y1 + (y2 - y1) * t)
        interpolated_points.append((ix, iy))
    return interpolated_points

center = (WIDTH // 2, HEIGHT // 2)
size = 150

shape_a = get_square(center, size)
shape_b = get_star(center, size) # This will be the 4-point "star"

frame = 0
running = True

while running:
    clock.tick(fps)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False


    t = (frame % total_frames) / total_frames

    if (frame // total_frames) % 2 == 1:
        # Reverse morph (shape_b to shape_a)
        current_shape = interpolate_points(shape_b, shape_a, t)
    else:
        # Forward morph (shape_a to shape_b)
        current_shape = interpolate_points(shape_a, shape_b, t)

    screen.fill(WHITE)
    if current_shape and len(current_shape) >= 3: # Need at least 3 points for a polygon
        pygame.draw.polygon(screen, BLUE, current_shape)
    pygame.display.flip()

    frame += 1

pygame.quit()
sys.exit()


# Content from practica48\main.txt
import pygame
import sys

# Inicializar Pygame
pygame.init()
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Onion Skinning")

WHITE = (255, 255, 255)
RED = (255, 0, 0)
SHADOW_COLOR = (255, 0, 0, 40) # Color traslucido para sombra

clock = pygame.time.Clock()
fps = 60

# Posiciones de cuadros anteriores para onion skinning
history = []
max_trail = 10 # cantidad de cuadrso pasados que se muestra

# Objeto animado
x,y = 100, HEIGHT // 2
speed = 3
radius = 30

# Loop principal
running = True
while running:
    clock.tick(fps)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    # Actualizar posiciÃ³n
    x += speed
    if x > WIDTH + radius:
        x = -radius
        history.clear()
    
    # Guardar la posiciÃ³n actual en el historial
    history.append((x, y))
    if len(history) > max_trail:
        history.pop(0)
        
    # Dibujar
    screen.fill(WHITE)
    
    # Dibujar sombras anteriores (onion skinning)
    for i, (hx, hy) in enumerate(history):
        alpha = int(255 * ((i + 1) / max_trail)) // 6 # gradiente de opacidad
        shadow_surface = pygame.Surface((radius*2, radius*2), pygame.SRCALPHA)
        pygame.draw.circle(shadow_surface, (255, 0, 0, alpha), (radius, radius), radius)
        screen.blit(shadow_surface, (hx - radius, hy - radius))    
        
    # Dibujar objeto actual
    pygame.draw.circle(screen, RED, (x, y), radius)
    pygame.display.flip()

pygame.quit()
sys.exit()


